AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MyIpAddress:
    Type: String

  WebServerPort:
    Type: Number

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPCDemo

  # Public Subnet 1 in AZ us-east-2a
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-2a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetA

  # Public Subnet 2 in AZ us-east-2b
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-2b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetB

  # Private Subnet 1 in AZ us-east-2a (for RDS)
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-2a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  # Private Subnet 2 in AZ us-east-2b (for RDS)
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-2b"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetB

  # Internet Gateway for VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGatewayDemo

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway in a Public Subnet (for private subnets to access internet)
  EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private Route Table (uses NAT Gateway to access the internet)
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Public Subnets with Public Route Table
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Subnets with Private Route Table
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EC2 (allows SSH, HTTP)
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EC2 Instance: Allow SSH, HTTP, Web Server PORT (Custom TCP)"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80 # HTTP
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22 # SSH
          CidrIp: !Ref MyIpAddress

        - IpProtocol: tcp
          FromPort: !Ref WebServerPort
          ToPort: !Ref WebServerPort # Web server port
          CidrIp: 0.0.0.0/0

  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS DB Instance"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432 # PostgreSQL
          SourceSecurityGroupId: !Ref EC2SecurityGroup

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: VpcId

  PublicSubnetAId:
    Value: !Ref PublicSubnetA
    Export:
      Name: PublicSubnetAId

  PublicSubnetBId:
    Value: !Ref PublicSubnetB
    Export:
      Name: PublicSubnetBId

  PrivateSubnetAId:
    Value: !Ref PrivateSubnetA
    Export:
      Name: PrivateSubnetAId

  PrivateSubnetBId:
    Value: !Ref PrivateSubnetB
    Export:
      Name: PrivateSubnetBId

  EC2SecurityGroupId:
    Value: !Ref EC2SecurityGroup
    Export:
      Name: EC2SecurityGroupId

  RDSSecurityGroupId:
    Value: !Ref RDSSecurityGroup
    Export:
      Name: RDSSecurityGroupId
